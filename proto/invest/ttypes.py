#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ListInvestsStatus:
  Success = 0
  NoLogin = 1
  Failed = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "Failed": 2,
  }

class GetInvestPerformanceStatus:
  Success = 0
  NoMore = 1
  NoSuchInvest = 2
  Failed = 3

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoMore",
    2: "NoSuchInvest",
    3: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoMore": 1,
    "NoSuchInvest": 2,
    "Failed": 3,
  }

class InvestStatus:
  Success = 0
  NoLogin = 1
  NoPay = 2
  Failed = 3

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoPay",
    3: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoPay": 2,
    "Failed": 3,
  }

class DisInvestStatus:
  Success = 0
  NoSuchInvest = 1
  NoEnoughInvestment = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoSuchInvest",
    2: "NoEnoughInvestment",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoSuchInvest": 1,
    "NoEnoughInvestment": 2,
  }


class ListInvestsResponseItem:
  """
  Attributes:
   - InvestId
   - StrategyId
   - StrategyName
   - Investment
   - PNL
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'InvestId', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
    (4, TType.DOUBLE, 'Investment', None, None, ), # 4
    (5, TType.DOUBLE, 'PNL', None, None, ), # 5
  )

  def __init__(self, InvestId=None, StrategyId=None, StrategyName=None, Investment=None, PNL=None,):
    self.InvestId = InvestId
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName
    self.Investment = Investment
    self.PNL = PNL

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.InvestId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.Investment = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.PNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListInvestsResponseItem')
    if self.InvestId is not None:
      oprot.writeFieldBegin('InvestId', TType.I32, 1)
      oprot.writeI32(self.InvestId)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.Investment is not None:
      oprot.writeFieldBegin('Investment', TType.DOUBLE, 4)
      oprot.writeDouble(self.Investment)
      oprot.writeFieldEnd()
    if self.PNL is not None:
      oprot.writeFieldBegin('PNL', TType.DOUBLE, 5)
      oprot.writeDouble(self.PNL)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListInvestsResponse:
  """
  Attributes:
   - Status
   - Invests
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.LIST, 'Invests', (TType.STRUCT,(ListInvestsResponseItem, ListInvestsResponseItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, Status=None, Invests=None,):
    self.Status = Status
    self.Invests = Invests

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.Invests = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ListInvestsResponseItem()
            _elem5.read(iprot)
            self.Invests.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListInvestsResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.Invests is not None:
      oprot.writeFieldBegin('Invests', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.Invests))
      for iter6 in self.Invests:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetInvestPerformanceRequest:
  """
  Attributes:
   - InvestId
   - FromTime
   - IntervalDay
   - MaxCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'InvestId', None, None, ), # 1
    (2, TType.STRING, 'FromTime', None, None, ), # 2
    (3, TType.I32, 'IntervalDay', None, None, ), # 3
    (4, TType.I32, 'MaxCount', None, None, ), # 4
  )

  def __init__(self, InvestId=None, FromTime=None, IntervalDay=None, MaxCount=None,):
    self.InvestId = InvestId
    self.FromTime = FromTime
    self.IntervalDay = IntervalDay
    self.MaxCount = MaxCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.InvestId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.FromTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.IntervalDay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.MaxCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetInvestPerformanceRequest')
    if self.InvestId is not None:
      oprot.writeFieldBegin('InvestId', TType.I32, 1)
      oprot.writeI32(self.InvestId)
      oprot.writeFieldEnd()
    if self.FromTime is not None:
      oprot.writeFieldBegin('FromTime', TType.STRING, 2)
      oprot.writeString(self.FromTime)
      oprot.writeFieldEnd()
    if self.IntervalDay is not None:
      oprot.writeFieldBegin('IntervalDay', TType.I32, 3)
      oprot.writeI32(self.IntervalDay)
      oprot.writeFieldEnd()
    if self.MaxCount is not None:
      oprot.writeFieldBegin('MaxCount', TType.I32, 4)
      oprot.writeI32(self.MaxCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetInvestPerformanceResponseItem:
  """
  Attributes:
   - OpenInvestment
   - CloseInvestment
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'OpenInvestment', None, None, ), # 1
    (2, TType.DOUBLE, 'CloseInvestment', None, None, ), # 2
  )

  def __init__(self, OpenInvestment=None, CloseInvestment=None,):
    self.OpenInvestment = OpenInvestment
    self.CloseInvestment = CloseInvestment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.OpenInvestment = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.CloseInvestment = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetInvestPerformanceResponseItem')
    if self.OpenInvestment is not None:
      oprot.writeFieldBegin('OpenInvestment', TType.DOUBLE, 1)
      oprot.writeDouble(self.OpenInvestment)
      oprot.writeFieldEnd()
    if self.CloseInvestment is not None:
      oprot.writeFieldBegin('CloseInvestment', TType.DOUBLE, 2)
      oprot.writeDouble(self.CloseInvestment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetInvestPerformanceResponse:
  """
  Attributes:
   - Status
   - Performances
   - TotalPNL
   - Investment
   - IntervalDay
   - FromTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.LIST, 'Performances', (TType.STRUCT,(GetInvestPerformanceResponseItem, GetInvestPerformanceResponseItem.thrift_spec)), None, ), # 2
    (3, TType.DOUBLE, 'TotalPNL', None, None, ), # 3
    (4, TType.DOUBLE, 'Investment', None, None, ), # 4
    (5, TType.I32, 'IntervalDay', None, None, ), # 5
    (6, TType.STRING, 'FromTime', None, None, ), # 6
  )

  def __init__(self, Status=None, Performances=None, TotalPNL=None, Investment=None, IntervalDay=None, FromTime=None,):
    self.Status = Status
    self.Performances = Performances
    self.TotalPNL = TotalPNL
    self.Investment = Investment
    self.IntervalDay = IntervalDay
    self.FromTime = FromTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.Performances = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = GetInvestPerformanceResponseItem()
            _elem12.read(iprot)
            self.Performances.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.TotalPNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.Investment = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.IntervalDay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.FromTime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetInvestPerformanceResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.Performances is not None:
      oprot.writeFieldBegin('Performances', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.Performances))
      for iter13 in self.Performances:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.TotalPNL is not None:
      oprot.writeFieldBegin('TotalPNL', TType.DOUBLE, 3)
      oprot.writeDouble(self.TotalPNL)
      oprot.writeFieldEnd()
    if self.Investment is not None:
      oprot.writeFieldBegin('Investment', TType.DOUBLE, 4)
      oprot.writeDouble(self.Investment)
      oprot.writeFieldEnd()
    if self.IntervalDay is not None:
      oprot.writeFieldBegin('IntervalDay', TType.I32, 5)
      oprot.writeI32(self.IntervalDay)
      oprot.writeFieldEnd()
    if self.FromTime is not None:
      oprot.writeFieldBegin('FromTime', TType.STRING, 6)
      oprot.writeString(self.FromTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvestRequest:
  """
  Attributes:
   - StrategyId
   - DelayPayId
   - Investment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.I32, 'DelayPayId', None, None, ), # 2
    (3, TType.DOUBLE, 'Investment', None, None, ), # 3
  )

  def __init__(self, StrategyId=None, DelayPayId=None, Investment=None,):
    self.StrategyId = StrategyId
    self.DelayPayId = DelayPayId
    self.Investment = Investment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.DelayPayId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.Investment = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvestRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.DelayPayId is not None:
      oprot.writeFieldBegin('DelayPayId', TType.I32, 2)
      oprot.writeI32(self.DelayPayId)
      oprot.writeFieldEnd()
    if self.Investment is not None:
      oprot.writeFieldBegin('Investment', TType.DOUBLE, 3)
      oprot.writeDouble(self.Investment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvestResponse:
  """
  Attributes:
   - Status
   - InvestId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'InvestId', None, None, ), # 2
  )

  def __init__(self, Status=None, InvestId=None,):
    self.Status = Status
    self.InvestId = InvestId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.InvestId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvestResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.InvestId is not None:
      oprot.writeFieldBegin('InvestId', TType.I32, 2)
      oprot.writeI32(self.InvestId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DisInvestRequest:
  """
  Attributes:
   - InvestId
   - Investment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'InvestId', None, None, ), # 1
    (2, TType.DOUBLE, 'Investment', None, None, ), # 2
  )

  def __init__(self, InvestId=None, Investment=None,):
    self.InvestId = InvestId
    self.Investment = Investment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.InvestId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.Investment = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DisInvestRequest')
    if self.InvestId is not None:
      oprot.writeFieldBegin('InvestId', TType.I32, 1)
      oprot.writeI32(self.InvestId)
      oprot.writeFieldEnd()
    if self.Investment is not None:
      oprot.writeFieldBegin('Investment', TType.DOUBLE, 2)
      oprot.writeDouble(self.Investment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DisInvestResponse:
  """
  Attributes:
   - Status
   - InvestId
   - RestInvestment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'InvestId', None, None, ), # 2
    (3, TType.I32, 'RestInvestment', None, None, ), # 3
  )

  def __init__(self, Status=None, InvestId=None, RestInvestment=None,):
    self.Status = Status
    self.InvestId = InvestId
    self.RestInvestment = RestInvestment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.InvestId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.RestInvestment = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DisInvestResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.InvestId is not None:
      oprot.writeFieldBegin('InvestId', TType.I32, 2)
      oprot.writeI32(self.InvestId)
      oprot.writeFieldEnd()
    if self.RestInvestment is not None:
      oprot.writeFieldBegin('RestInvestment', TType.I32, 3)
      oprot.writeI32(self.RestInvestment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
