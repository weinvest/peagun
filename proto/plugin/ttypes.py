#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PluginType:
  Strategy = 0
  InstructionComponent = 1
  FeedSource = 2
  Market = 3
  Indicator = 4
  All = 5

  _VALUES_TO_NAMES = {
    0: "Strategy",
    1: "InstructionComponent",
    2: "FeedSource",
    3: "Market",
    4: "Indicator",
    5: "All",
  }

  _NAMES_TO_VALUES = {
    "Strategy": 0,
    "InstructionComponent": 1,
    "FeedSource": 2,
    "Market": 3,
    "Indicator": 4,
    "All": 5,
  }

class ListPluginStatus:
  Success = 0
  NoLogin = 1
  Failed = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "Failed": 2,
  }

class PutPluginStatus:
  Success = 0
  NoLogin = 1
  Exists = 2
  Failed = 3

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "Exists",
    3: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "Exists": 2,
    "Failed": 3,
  }

class DeletePluginStatus:
  Success = 0
  NoLogin = 1
  PermissionDenied = 2
  NotExists = 3

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "PermissionDenied",
    3: "NotExists",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "PermissionDenied": 2,
    "NotExists": 3,
  }

class GetPluginParamsStatus:
  Success = 0
  NoLogin = 1
  NoSuchPlugin = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoSuchPlugin",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoSuchPlugin": 2,
  }

class GetHotPluginStatus:
  Success = 0
  NoMore = 1
  Failed = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoMore",
    2: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoMore": 1,
    "Failed": 2,
  }

class BuyPluginStatus:
  Success = 0
  NoLogin = 1
  NoPay = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoPay",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoPay": 2,
  }


class ListPluginRequest:
  """
  Attributes:
   - Type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Type', None, None, ), # 1
  )

  def __init__(self, Type=None,):
    self.Type = Type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListPluginRequest')
    if self.Type is not None:
      oprot.writeFieldBegin('Type', TType.I32, 1)
      oprot.writeI32(self.Type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListPluginResponseItem:
  """
  Attributes:
   - Type
   - PluginId
   - PluginName
   - Owner
   - OwnTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Type', None, None, ), # 1
    (2, TType.I32, 'PluginId', None, None, ), # 2
    (3, TType.STRING, 'PluginName', None, None, ), # 3
    (4, TType.I32, 'Owner', None, None, ), # 4
    (5, TType.STRING, 'OwnTime', None, None, ), # 5
  )

  def __init__(self, Type=None, PluginId=None, PluginName=None, Owner=None, OwnTime=None,):
    self.Type = Type
    self.PluginId = PluginId
    self.PluginName = PluginName
    self.Owner = Owner
    self.OwnTime = OwnTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.PluginName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.Owner = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.OwnTime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListPluginResponseItem')
    if self.Type is not None:
      oprot.writeFieldBegin('Type', TType.I32, 1)
      oprot.writeI32(self.Type)
      oprot.writeFieldEnd()
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 2)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    if self.PluginName is not None:
      oprot.writeFieldBegin('PluginName', TType.STRING, 3)
      oprot.writeString(self.PluginName)
      oprot.writeFieldEnd()
    if self.Owner is not None:
      oprot.writeFieldBegin('Owner', TType.I32, 4)
      oprot.writeI32(self.Owner)
      oprot.writeFieldEnd()
    if self.OwnTime is not None:
      oprot.writeFieldBegin('OwnTime', TType.STRING, 5)
      oprot.writeString(self.OwnTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListPluginResponse:
  """
  Attributes:
   - Status
   - Plugins
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.LIST, 'Plugins', (TType.STRUCT,(ListPluginResponseItem, ListPluginResponseItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, Status=None, Plugins=None,):
    self.Status = Status
    self.Plugins = Plugins

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.Plugins = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ListPluginResponseItem()
            _elem5.read(iprot)
            self.Plugins.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListPluginResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.Plugins is not None:
      oprot.writeFieldBegin('Plugins', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.Plugins))
      for iter6 in self.Plugins:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PutPluginRequest:
  """
  Attributes:
   - Type
   - PluginName
   - SecurityText
   - Key
   - IsDebug
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Type', None, None, ), # 1
    (2, TType.STRING, 'PluginName', None, None, ), # 2
    (3, TType.STRING, 'SecurityText', None, None, ), # 3
    (4, TType.STRING, 'Key', None, None, ), # 4
    (5, TType.BOOL, 'IsDebug', None, None, ), # 5
  )

  def __init__(self, Type=None, PluginName=None, SecurityText=None, Key=None, IsDebug=None,):
    self.Type = Type
    self.PluginName = PluginName
    self.SecurityText = SecurityText
    self.Key = Key
    self.IsDebug = IsDebug

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.PluginName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.SecurityText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.IsDebug = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PutPluginRequest')
    if self.Type is not None:
      oprot.writeFieldBegin('Type', TType.I32, 1)
      oprot.writeI32(self.Type)
      oprot.writeFieldEnd()
    if self.PluginName is not None:
      oprot.writeFieldBegin('PluginName', TType.STRING, 2)
      oprot.writeString(self.PluginName)
      oprot.writeFieldEnd()
    if self.SecurityText is not None:
      oprot.writeFieldBegin('SecurityText', TType.STRING, 3)
      oprot.writeString(self.SecurityText)
      oprot.writeFieldEnd()
    if self.Key is not None:
      oprot.writeFieldBegin('Key', TType.STRING, 4)
      oprot.writeString(self.Key)
      oprot.writeFieldEnd()
    if self.IsDebug is not None:
      oprot.writeFieldBegin('IsDebug', TType.BOOL, 5)
      oprot.writeBool(self.IsDebug)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PutPluginResponse:
  """
  Attributes:
   - Status
   - PluginId
   - PluginName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'PluginId', None, None, ), # 2
    (3, TType.STRING, 'PluginName', None, None, ), # 3
  )

  def __init__(self, Status=None, PluginId=None, PluginName=None,):
    self.Status = Status
    self.PluginId = PluginId
    self.PluginName = PluginName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.PluginName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PutPluginResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 2)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    if self.PluginName is not None:
      oprot.writeFieldBegin('PluginName', TType.STRING, 3)
      oprot.writeString(self.PluginName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeletePluginRequest:
  """
  Attributes:
   - PluginId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'PluginId', None, None, ), # 1
  )

  def __init__(self, PluginId=None,):
    self.PluginId = PluginId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeletePluginRequest')
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 1)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeletePluginResponse:
  """
  Attributes:
   - Status
   - PluginId
   - PluginName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'PluginId', None, None, ), # 2
    (3, TType.STRING, 'PluginName', None, None, ), # 3
  )

  def __init__(self, Status=None, PluginId=None, PluginName=None,):
    self.Status = Status
    self.PluginId = PluginId
    self.PluginName = PluginName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.PluginName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeletePluginResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 2)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    if self.PluginName is not None:
      oprot.writeFieldBegin('PluginName', TType.STRING, 3)
      oprot.writeString(self.PluginName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPluginParamsRequest:
  """
  Attributes:
   - PluginId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'PluginId', None, None, ), # 1
  )

  def __init__(self, PluginId=None,):
    self.PluginId = PluginId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPluginParamsRequest')
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 1)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPluginParamsResponseItem:
  """
  Attributes:
   - ParamType
   - ParamName
   - DefaultValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ParamType', None, None, ), # 1
    (2, TType.STRING, 'ParamName', None, None, ), # 2
    (3, TType.STRING, 'DefaultValue', None, None, ), # 3
  )

  def __init__(self, ParamType=None, ParamName=None, DefaultValue=None,):
    self.ParamType = ParamType
    self.ParamName = ParamName
    self.DefaultValue = DefaultValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ParamType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ParamName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.DefaultValue = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPluginParamsResponseItem')
    if self.ParamType is not None:
      oprot.writeFieldBegin('ParamType', TType.I32, 1)
      oprot.writeI32(self.ParamType)
      oprot.writeFieldEnd()
    if self.ParamName is not None:
      oprot.writeFieldBegin('ParamName', TType.STRING, 2)
      oprot.writeString(self.ParamName)
      oprot.writeFieldEnd()
    if self.DefaultValue is not None:
      oprot.writeFieldBegin('DefaultValue', TType.STRING, 3)
      oprot.writeString(self.DefaultValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPluginParamsResponse:
  """
  Attributes:
   - Status
   - PluginId
   - Params
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'PluginId', None, None, ), # 2
    (3, TType.LIST, 'Params', (TType.STRUCT,(GetPluginParamsResponseItem, GetPluginParamsResponseItem.thrift_spec)), None, ), # 3
  )

  def __init__(self, Status=None, PluginId=None, Params=None,):
    self.Status = Status
    self.PluginId = PluginId
    self.Params = Params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.Params = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = GetPluginParamsResponseItem()
            _elem12.read(iprot)
            self.Params.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPluginParamsResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 2)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    if self.Params is not None:
      oprot.writeFieldBegin('Params', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.Params))
      for iter13 in self.Params:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetHotPluginsRequest:
  """
  Attributes:
   - MaxCount
   - Offset
   - SortField
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'MaxCount', None, None, ), # 1
    (2, TType.I32, 'Offset', None, None, ), # 2
    (3, TType.STRING, 'SortField', None, None, ), # 3
  )

  def __init__(self, MaxCount=None, Offset=None, SortField=None,):
    self.MaxCount = MaxCount
    self.Offset = Offset
    self.SortField = SortField

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.MaxCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.SortField = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetHotPluginsRequest')
    if self.MaxCount is not None:
      oprot.writeFieldBegin('MaxCount', TType.I32, 1)
      oprot.writeI32(self.MaxCount)
      oprot.writeFieldEnd()
    if self.Offset is not None:
      oprot.writeFieldBegin('Offset', TType.I32, 2)
      oprot.writeI32(self.Offset)
      oprot.writeFieldEnd()
    if self.SortField is not None:
      oprot.writeFieldBegin('SortField', TType.STRING, 3)
      oprot.writeString(self.SortField)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetHotPluginResponseItem:
  """
  Attributes:
   - PluginId
   - PluginName
   - Ownser
   - UsedCount
   - AveragePNL
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'PluginId', None, None, ), # 1
    (2, TType.STRING, 'PluginName', None, None, ), # 2
    (3, TType.I32, 'Ownser', None, None, ), # 3
    (4, TType.I32, 'UsedCount', None, None, ), # 4
    (5, TType.DOUBLE, 'AveragePNL', None, None, ), # 5
  )

  def __init__(self, PluginId=None, PluginName=None, Ownser=None, UsedCount=None, AveragePNL=None,):
    self.PluginId = PluginId
    self.PluginName = PluginName
    self.Ownser = Ownser
    self.UsedCount = UsedCount
    self.AveragePNL = AveragePNL

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.PluginName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Ownser = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.UsedCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.AveragePNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetHotPluginResponseItem')
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 1)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    if self.PluginName is not None:
      oprot.writeFieldBegin('PluginName', TType.STRING, 2)
      oprot.writeString(self.PluginName)
      oprot.writeFieldEnd()
    if self.Ownser is not None:
      oprot.writeFieldBegin('Ownser', TType.I32, 3)
      oprot.writeI32(self.Ownser)
      oprot.writeFieldEnd()
    if self.UsedCount is not None:
      oprot.writeFieldBegin('UsedCount', TType.I32, 4)
      oprot.writeI32(self.UsedCount)
      oprot.writeFieldEnd()
    if self.AveragePNL is not None:
      oprot.writeFieldBegin('AveragePNL', TType.DOUBLE, 5)
      oprot.writeDouble(self.AveragePNL)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetHotPluginResponse:
  """
  Attributes:
   - Status
   - FistRank
   - Plugins
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'FistRank', None, None, ), # 2
    (3, TType.LIST, 'Plugins', (TType.STRUCT,(GetHotPluginResponseItem, GetHotPluginResponseItem.thrift_spec)), None, ), # 3
  )

  def __init__(self, Status=None, FistRank=None, Plugins=None,):
    self.Status = Status
    self.FistRank = FistRank
    self.Plugins = Plugins

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.FistRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.Plugins = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = GetHotPluginResponseItem()
            _elem19.read(iprot)
            self.Plugins.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetHotPluginResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.FistRank is not None:
      oprot.writeFieldBegin('FistRank', TType.I32, 2)
      oprot.writeI32(self.FistRank)
      oprot.writeFieldEnd()
    if self.Plugins is not None:
      oprot.writeFieldBegin('Plugins', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.Plugins))
      for iter20 in self.Plugins:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BuyPluginRequest:
  """
  Attributes:
   - PluginId
   - PayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'PluginId', None, None, ), # 1
    (2, TType.I32, 'PayId', None, None, ), # 2
  )

  def __init__(self, PluginId=None, PayId=None,):
    self.PluginId = PluginId
    self.PayId = PayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.PayId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BuyPluginRequest')
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 1)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    if self.PayId is not None:
      oprot.writeFieldBegin('PayId', TType.I32, 2)
      oprot.writeI32(self.PayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BuyPluginResponse:
  """
  Attributes:
   - Status
   - PluginId
   - PluginName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'PluginId', None, None, ), # 2
    (3, TType.STRING, 'PluginName', None, None, ), # 3
  )

  def __init__(self, Status=None, PluginId=None, PluginName=None,):
    self.Status = Status
    self.PluginId = PluginId
    self.PluginName = PluginName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.PluginId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.PluginName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BuyPluginResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.PluginId is not None:
      oprot.writeFieldBegin('PluginId', TType.I32, 2)
      oprot.writeI32(self.PluginId)
      oprot.writeFieldEnd()
    if self.PluginName is not None:
      oprot.writeFieldBegin('PluginName', TType.STRING, 3)
      oprot.writeString(self.PluginName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
