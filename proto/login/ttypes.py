#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RegisteStatus:
  Sucess = 0
  Existed = 1
  SecurityCodeWrong = 2

  _VALUES_TO_NAMES = {
    0: "Sucess",
    1: "Existed",
    2: "SecurityCodeWrong",
  }

  _NAMES_TO_VALUES = {
    "Sucess": 0,
    "Existed": 1,
    "SecurityCodeWrong": 2,
  }

class LoginStatus:
  Success = 0
  NoSuchUser = 1
  PasswordWrong = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoSuchUser",
    2: "PasswordWrong",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoSuchUser": 1,
    "PasswordWrong": 2,
  }

class ChangeKeyStatus:
  Success = 0
  NoLogin = 1

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
  }

class ChangePasswordStatus:
  Success = 0
  NoLogin = 1
  PasswordWrong = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "PasswordWrong",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "PasswordWrong": 2,
  }

class LogoutStatus:
  Success = 0
  NoLogin = 1

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
  }


class RegisteRequest:
  """
  Attributes:
   - UserName
   - Password
   - PublicKey
   - PrivateKey
   - Mobile
   - Email
   - SecurityCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'UserName', None, None, ), # 1
    (2, TType.STRING, 'Password', None, None, ), # 2
    (3, TType.STRING, 'PublicKey', None, None, ), # 3
    (4, TType.STRING, 'PrivateKey', None, None, ), # 4
    (5, TType.STRING, 'Mobile', None, None, ), # 5
    (6, TType.STRING, 'Email', None, None, ), # 6
    (7, TType.STRING, 'SecurityCode', None, None, ), # 7
  )

  def __init__(self, UserName=None, Password=None, PublicKey=None, PrivateKey=None, Mobile=None, Email=None, SecurityCode=None,):
    self.UserName = UserName
    self.Password = Password
    self.PublicKey = PublicKey
    self.PrivateKey = PrivateKey
    self.Mobile = Mobile
    self.Email = Email
    self.SecurityCode = SecurityCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.UserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.PublicKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.PrivateKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.Mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.Email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.SecurityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegisteRequest')
    if self.UserName is not None:
      oprot.writeFieldBegin('UserName', TType.STRING, 1)
      oprot.writeString(self.UserName)
      oprot.writeFieldEnd()
    if self.Password is not None:
      oprot.writeFieldBegin('Password', TType.STRING, 2)
      oprot.writeString(self.Password)
      oprot.writeFieldEnd()
    if self.PublicKey is not None:
      oprot.writeFieldBegin('PublicKey', TType.STRING, 3)
      oprot.writeString(self.PublicKey)
      oprot.writeFieldEnd()
    if self.PrivateKey is not None:
      oprot.writeFieldBegin('PrivateKey', TType.STRING, 4)
      oprot.writeString(self.PrivateKey)
      oprot.writeFieldEnd()
    if self.Mobile is not None:
      oprot.writeFieldBegin('Mobile', TType.STRING, 5)
      oprot.writeString(self.Mobile)
      oprot.writeFieldEnd()
    if self.Email is not None:
      oprot.writeFieldBegin('Email', TType.STRING, 6)
      oprot.writeString(self.Email)
      oprot.writeFieldEnd()
    if self.SecurityCode is not None:
      oprot.writeFieldBegin('SecurityCode', TType.STRING, 7)
      oprot.writeString(self.SecurityCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegisteResponse:
  """
  Attributes:
   - Status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
  )

  def __init__(self, Status=None,):
    self.Status = Status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegisteResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoginRequest:
  """
  Attributes:
   - UserName
   - Password
   - SecurityCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'UserName', None, None, ), # 1
    (2, TType.STRING, 'Password', None, None, ), # 2
    (3, TType.STRING, 'SecurityCode', None, None, ), # 3
  )

  def __init__(self, UserName=None, Password=None, SecurityCode=None,):
    self.UserName = UserName
    self.Password = Password
    self.SecurityCode = SecurityCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.UserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.SecurityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginRequest')
    if self.UserName is not None:
      oprot.writeFieldBegin('UserName', TType.STRING, 1)
      oprot.writeString(self.UserName)
      oprot.writeFieldEnd()
    if self.Password is not None:
      oprot.writeFieldBegin('Password', TType.STRING, 2)
      oprot.writeString(self.Password)
      oprot.writeFieldEnd()
    if self.SecurityCode is not None:
      oprot.writeFieldBegin('SecurityCode', TType.STRING, 3)
      oprot.writeString(self.SecurityCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoginResponse:
  """
  Attributes:
   - Status
   - SessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'SessionId', None, None, ), # 2
  )

  def __init__(self, Status=None, SessionId=None,):
    self.Status = Status
    self.SessionId = SessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.SessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.SessionId is not None:
      oprot.writeFieldBegin('SessionId', TType.I32, 2)
      oprot.writeI32(self.SessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChangeKeyRequest:
  """
  Attributes:
   - PublicKey
   - PrivateKey
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'PublicKey', None, None, ), # 1
    (2, TType.STRING, 'PrivateKey', None, None, ), # 2
  )

  def __init__(self, PublicKey=None, PrivateKey=None,):
    self.PublicKey = PublicKey
    self.PrivateKey = PrivateKey

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.PublicKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.PrivateKey = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChangeKeyRequest')
    if self.PublicKey is not None:
      oprot.writeFieldBegin('PublicKey', TType.STRING, 1)
      oprot.writeString(self.PublicKey)
      oprot.writeFieldEnd()
    if self.PrivateKey is not None:
      oprot.writeFieldBegin('PrivateKey', TType.STRING, 2)
      oprot.writeString(self.PrivateKey)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChangeKeyResponse:
  """
  Attributes:
   - Status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
  )

  def __init__(self, Status=None,):
    self.Status = Status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChangeKeyResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChangePasswordRequest:
  """
  Attributes:
   - OldPassword
   - NewPassword
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'OldPassword', None, None, ), # 1
    (2, TType.STRING, 'NewPassword', None, None, ), # 2
  )

  def __init__(self, OldPassword=None, NewPassword=None,):
    self.OldPassword = OldPassword
    self.NewPassword = NewPassword

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.OldPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.NewPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChangePasswordRequest')
    if self.OldPassword is not None:
      oprot.writeFieldBegin('OldPassword', TType.STRING, 1)
      oprot.writeString(self.OldPassword)
      oprot.writeFieldEnd()
    if self.NewPassword is not None:
      oprot.writeFieldBegin('NewPassword', TType.STRING, 2)
      oprot.writeString(self.NewPassword)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChangePasswordResponse:
  """
  Attributes:
   - Status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
  )

  def __init__(self, Status=None,):
    self.Status = Status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChangePasswordResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LogoutResponse:
  """
  Attributes:
   - Status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
  )

  def __init__(self, Status=None,):
    self.Status = Status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LogoutResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoginNotify:
  """
  Attributes:
   - SessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'SessionId', None, None, ), # 1
  )

  def __init__(self, SessionId=None,):
    self.SessionId = SessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.SessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginNotify')
    if self.SessionId is not None:
      oprot.writeFieldBegin('SessionId', TType.I32, 1)
      oprot.writeI32(self.SessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LogoutNotify:
  """
  Attributes:
   - SessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'SessionId', None, None, ), # 1
  )

  def __init__(self, SessionId=None,):
    self.SessionId = SessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.SessionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LogoutNotify')
    if self.SessionId is not None:
      oprot.writeFieldBegin('SessionId', TType.I32, 1)
      oprot.writeI32(self.SessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
