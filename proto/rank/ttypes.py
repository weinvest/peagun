#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class StrategyRunMode:
  BackTest = 0
  Simulation = 1
  Live = 2

  _VALUES_TO_NAMES = {
    0: "BackTest",
    1: "Simulation",
    2: "Live",
  }

  _NAMES_TO_VALUES = {
    "BackTest": 0,
    "Simulation": 1,
    "Live": 2,
  }

class GetRankStatus:
  Success = 0
  NoMore = 1

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoMore",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoMore": 1,
  }

class GetPerformanceStatus:
  Success = 0
  NoResult = 1

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoResult",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoResult": 1,
  }


class GetRankRequest:
  """
  Attributes:
   - RunMode
   - SortField
   - Offset
   - MaxCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'RunMode', None, None, ), # 1
    (2, TType.STRING, 'SortField', None, None, ), # 2
    (3, TType.I32, 'Offset', None, None, ), # 3
    (4, TType.I32, 'MaxCount', None, None, ), # 4
  )

  def __init__(self, RunMode=None, SortField=None, Offset=None, MaxCount=None,):
    self.RunMode = RunMode
    self.SortField = SortField
    self.Offset = Offset
    self.MaxCount = MaxCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.RunMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.SortField = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.MaxCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetRankRequest')
    if self.RunMode is not None:
      oprot.writeFieldBegin('RunMode', TType.I32, 1)
      oprot.writeI32(self.RunMode)
      oprot.writeFieldEnd()
    if self.SortField is not None:
      oprot.writeFieldBegin('SortField', TType.STRING, 2)
      oprot.writeString(self.SortField)
      oprot.writeFieldEnd()
    if self.Offset is not None:
      oprot.writeFieldBegin('Offset', TType.I32, 3)
      oprot.writeI32(self.Offset)
      oprot.writeFieldEnd()
    if self.MaxCount is not None:
      oprot.writeFieldBegin('MaxCount', TType.I32, 4)
      oprot.writeI32(self.MaxCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetRankResponseItem:
  """
  Attributes:
   - StrategyId
   - Author
   - StrategyName
   - PNL7
   - PNL30
   - PNL180
   - TotalInvestment
   - TotalPNL
   - Sharp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.I32, 'Author', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
    (4, TType.DOUBLE, 'PNL7', None, None, ), # 4
    (5, TType.DOUBLE, 'PNL30', None, None, ), # 5
    (6, TType.DOUBLE, 'PNL180', None, None, ), # 6
    (7, TType.DOUBLE, 'TotalInvestment', None, None, ), # 7
    (8, TType.DOUBLE, 'TotalPNL', None, None, ), # 8
    (9, TType.DOUBLE, 'Sharp', None, None, ), # 9
  )

  def __init__(self, StrategyId=None, Author=None, StrategyName=None, PNL7=None, PNL30=None, PNL180=None, TotalInvestment=None, TotalPNL=None, Sharp=None,):
    self.StrategyId = StrategyId
    self.Author = Author
    self.StrategyName = StrategyName
    self.PNL7 = PNL7
    self.PNL30 = PNL30
    self.PNL180 = PNL180
    self.TotalInvestment = TotalInvestment
    self.TotalPNL = TotalPNL
    self.Sharp = Sharp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Author = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.PNL7 = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.PNL30 = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.PNL180 = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.TotalInvestment = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.TotalPNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.Sharp = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetRankResponseItem')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.Author is not None:
      oprot.writeFieldBegin('Author', TType.I32, 2)
      oprot.writeI32(self.Author)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.PNL7 is not None:
      oprot.writeFieldBegin('PNL7', TType.DOUBLE, 4)
      oprot.writeDouble(self.PNL7)
      oprot.writeFieldEnd()
    if self.PNL30 is not None:
      oprot.writeFieldBegin('PNL30', TType.DOUBLE, 5)
      oprot.writeDouble(self.PNL30)
      oprot.writeFieldEnd()
    if self.PNL180 is not None:
      oprot.writeFieldBegin('PNL180', TType.DOUBLE, 6)
      oprot.writeDouble(self.PNL180)
      oprot.writeFieldEnd()
    if self.TotalInvestment is not None:
      oprot.writeFieldBegin('TotalInvestment', TType.DOUBLE, 7)
      oprot.writeDouble(self.TotalInvestment)
      oprot.writeFieldEnd()
    if self.TotalPNL is not None:
      oprot.writeFieldBegin('TotalPNL', TType.DOUBLE, 8)
      oprot.writeDouble(self.TotalPNL)
      oprot.writeFieldEnd()
    if self.Sharp is not None:
      oprot.writeFieldBegin('Sharp', TType.DOUBLE, 9)
      oprot.writeDouble(self.Sharp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetRankResponse:
  """
  Attributes:
   - Statue
   - FirstRank
   - SortedRanks
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Statue', None, None, ), # 1
    (2, TType.I32, 'FirstRank', None, None, ), # 2
    (3, TType.LIST, 'SortedRanks', (TType.STRUCT,(GetRankResponseItem, GetRankResponseItem.thrift_spec)), None, ), # 3
  )

  def __init__(self, Statue=None, FirstRank=None, SortedRanks=None,):
    self.Statue = Statue
    self.FirstRank = FirstRank
    self.SortedRanks = SortedRanks

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Statue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.FirstRank = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.SortedRanks = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = GetRankResponseItem()
            _elem5.read(iprot)
            self.SortedRanks.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetRankResponse')
    if self.Statue is not None:
      oprot.writeFieldBegin('Statue', TType.I32, 1)
      oprot.writeI32(self.Statue)
      oprot.writeFieldEnd()
    if self.FirstRank is not None:
      oprot.writeFieldBegin('FirstRank', TType.I32, 2)
      oprot.writeI32(self.FirstRank)
      oprot.writeFieldEnd()
    if self.SortedRanks is not None:
      oprot.writeFieldBegin('SortedRanks', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.SortedRanks))
      for iter6 in self.SortedRanks:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPerformanceRequest:
  """
  Attributes:
   - StrategyId
   - RunMode
   - IntervalDay
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.I32, 'RunMode', None, None, ), # 2
    (3, TType.I32, 'IntervalDay', None, None, ), # 3
  )

  def __init__(self, StrategyId=None, RunMode=None, IntervalDay=None,):
    self.StrategyId = StrategyId
    self.RunMode = RunMode
    self.IntervalDay = IntervalDay

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.RunMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.IntervalDay = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPerformanceRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.RunMode is not None:
      oprot.writeFieldBegin('RunMode', TType.I32, 2)
      oprot.writeI32(self.RunMode)
      oprot.writeFieldEnd()
    if self.IntervalDay is not None:
      oprot.writeFieldBegin('IntervalDay', TType.I32, 3)
      oprot.writeI32(self.IntervalDay)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPerformanceResponseItem:
  """
  Attributes:
   - OpenInvest
   - CloseInvest
   - Sharp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'OpenInvest', None, None, ), # 1
    (2, TType.I32, 'CloseInvest', None, None, ), # 2
    (3, TType.I32, 'Sharp', None, None, ), # 3
  )

  def __init__(self, OpenInvest=None, CloseInvest=None, Sharp=None,):
    self.OpenInvest = OpenInvest
    self.CloseInvest = CloseInvest
    self.Sharp = Sharp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.OpenInvest = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.CloseInvest = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Sharp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPerformanceResponseItem')
    if self.OpenInvest is not None:
      oprot.writeFieldBegin('OpenInvest', TType.I32, 1)
      oprot.writeI32(self.OpenInvest)
      oprot.writeFieldEnd()
    if self.CloseInvest is not None:
      oprot.writeFieldBegin('CloseInvest', TType.I32, 2)
      oprot.writeI32(self.CloseInvest)
      oprot.writeFieldEnd()
    if self.Sharp is not None:
      oprot.writeFieldBegin('Sharp', TType.I32, 3)
      oprot.writeI32(self.Sharp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPerformanceResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - Author
   - StrategName
   - IntervalDay
   - TotalPNL
   - TotalInvestment
   - Performances
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.I32, 'Author', None, None, ), # 3
    (4, TType.STRING, 'StrategName', None, None, ), # 4
    (5, TType.I32, 'IntervalDay', None, None, ), # 5
    (6, TType.DOUBLE, 'TotalPNL', None, None, ), # 6
    (7, TType.DOUBLE, 'TotalInvestment', None, None, ), # 7
    (8, TType.LIST, 'Performances', (TType.STRUCT,(GetPerformanceResponseItem, GetPerformanceResponseItem.thrift_spec)), None, ), # 8
  )

  def __init__(self, Status=None, StrategyId=None, Author=None, StrategName=None, IntervalDay=None, TotalPNL=None, TotalInvestment=None, Performances=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.Author = Author
    self.StrategName = StrategName
    self.IntervalDay = IntervalDay
    self.TotalPNL = TotalPNL
    self.TotalInvestment = TotalInvestment
    self.Performances = Performances

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Author = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.StrategName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.IntervalDay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.TotalPNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.TotalInvestment = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.Performances = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = GetPerformanceResponseItem()
            _elem12.read(iprot)
            self.Performances.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPerformanceResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.Author is not None:
      oprot.writeFieldBegin('Author', TType.I32, 3)
      oprot.writeI32(self.Author)
      oprot.writeFieldEnd()
    if self.StrategName is not None:
      oprot.writeFieldBegin('StrategName', TType.STRING, 4)
      oprot.writeString(self.StrategName)
      oprot.writeFieldEnd()
    if self.IntervalDay is not None:
      oprot.writeFieldBegin('IntervalDay', TType.I32, 5)
      oprot.writeI32(self.IntervalDay)
      oprot.writeFieldEnd()
    if self.TotalPNL is not None:
      oprot.writeFieldBegin('TotalPNL', TType.DOUBLE, 6)
      oprot.writeDouble(self.TotalPNL)
      oprot.writeFieldEnd()
    if self.TotalInvestment is not None:
      oprot.writeFieldBegin('TotalInvestment', TType.DOUBLE, 7)
      oprot.writeDouble(self.TotalInvestment)
      oprot.writeFieldEnd()
    if self.Performances is not None:
      oprot.writeFieldBegin('Performances', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.Performances))
      for iter13 in self.Performances:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
