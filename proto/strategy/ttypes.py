#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class AddStrategyStatus:
  Success = 0
  AlreadyExists = 1
  Failed = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "AlreadyExists",
    2: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "AlreadyExists": 1,
    "Failed": 2,
  }

class GetStrategyStatus:
  Success = 0
  NoLogin = 1
  NoSuchStrategy = 2
  Failed = 3

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoSuchStrategy",
    3: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoSuchStrategy": 2,
    "Failed": 3,
  }

class UpdateStrategyStatus:
  Success = 0
  NoLogin = 1
  NoSuchStrategy = 2
  Failed = 3

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoSuchStrategy",
    3: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoSuchStrategy": 2,
    "Failed": 3,
  }

class StrategyStatus:
  None = 0
  InSimulation = 1
  InLive = 2

  _VALUES_TO_NAMES = {
    0: "None",
    1: "InSimulation",
    2: "InLive",
  }

  _NAMES_TO_VALUES = {
    "None": 0,
    "InSimulation": 1,
    "InLive": 2,
  }

class ListStrategyStatus:
  Success = 0
  NoLogin = 1
  Failed = 2

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "Failed": 2,
  }

class SubscribeTradingStatus:
  Success = 0
  NoLogin = 1
  NoSuchStrategy = 2
  AlreadySubscribed = 3
  Failed = 4

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoSuchStrategy",
    3: "AlreadySubscribed",
    4: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoSuchStrategy": 2,
    "AlreadySubscribed": 3,
    "Failed": 4,
  }

class UnSubscribeTradingStatus:
  Success = 0
  NoLogin = 1
  NoSuchStrategy = 2
  Failed = 3

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoSuchStrategy",
    3: "Failed",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoSuchStrategy": 2,
    "Failed": 3,
  }

class DeployStatus:
  Success = 0
  NoSuchStrategy = 1
  AlreadyDeployed = 2
  PermissionDenied = 3

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoSuchStrategy",
    2: "AlreadyDeployed",
    3: "PermissionDenied",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoSuchStrategy": 1,
    "AlreadyDeployed": 2,
    "PermissionDenied": 3,
  }

class EDeployType:
  BackTest = 0
  Simulation = 1
  Live = 2

  _VALUES_TO_NAMES = {
    0: "BackTest",
    1: "Simulation",
    2: "Live",
  }

  _NAMES_TO_VALUES = {
    "BackTest": 0,
    "Simulation": 1,
    "Live": 2,
  }

class DisableStrategyStatus:
  Success = 0
  NoLogin = 1
  NoSuchStrategy = 2
  NotDeployed = 3
  AlreadyDisabled = 4

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoSuchStrategy",
    3: "NotDeployed",
    4: "AlreadyDisabled",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoSuchStrategy": 2,
    "NotDeployed": 3,
    "AlreadyDisabled": 4,
  }

class EnableStrategyStatus:
  Success = 0
  NoLogin = 1
  NoSuchStrategy = 2
  NotDeployed = 3
  AlreadyEnabled = 4

  _VALUES_TO_NAMES = {
    0: "Success",
    1: "NoLogin",
    2: "NoSuchStrategy",
    3: "NotDeployed",
    4: "AlreadyEnabled",
  }

  _NAMES_TO_VALUES = {
    "Success": 0,
    "NoLogin": 1,
    "NoSuchStrategy": 2,
    "NotDeployed": 3,
    "AlreadyEnabled": 4,
  }


class AddStrategyRequest:
  """
  Attributes:
   - StrategyName
   - StrategyContent
   - Key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'StrategyName', None, None, ), # 1
    (2, TType.STRING, 'StrategyContent', None, None, ), # 2
    (3, TType.STRING, 'Key', None, None, ), # 3
  )

  def __init__(self, StrategyName=None, StrategyContent=None, Key=None,):
    self.StrategyName = StrategyName
    self.StrategyContent = StrategyContent
    self.Key = Key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.StrategyContent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.Key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddStrategyRequest')
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 1)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.StrategyContent is not None:
      oprot.writeFieldBegin('StrategyContent', TType.STRING, 2)
      oprot.writeString(self.StrategyContent)
      oprot.writeFieldEnd()
    if self.Key is not None:
      oprot.writeFieldBegin('Key', TType.STRING, 3)
      oprot.writeString(self.Key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddStrategyResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddStrategyResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetStrategyRequest:
  """
  Attributes:
   - StrategyId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
  )

  def __init__(self, StrategyId=None,):
    self.StrategyId = StrategyId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetStrategyRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetStrategyResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
   - StrategyContent
   - Key
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
    (4, TType.STRING, 'StrategyContent', None, None, ), # 4
    (5, TType.STRING, 'Key', None, None, ), # 5
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None, StrategyContent=None, Key=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName
    self.StrategyContent = StrategyContent
    self.Key = Key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.StrategyContent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.Key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetStrategyResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.StrategyContent is not None:
      oprot.writeFieldBegin('StrategyContent', TType.STRING, 4)
      oprot.writeString(self.StrategyContent)
      oprot.writeFieldEnd()
    if self.Key is not None:
      oprot.writeFieldBegin('Key', TType.STRING, 5)
      oprot.writeString(self.Key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateStrategyRequest:
  """
  Attributes:
   - StrategyId
   - StrategyName
   - StrategyContent
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.STRING, 'StrategyName', None, None, ), # 2
    (3, TType.STRING, 'StrategyContent', None, None, ), # 3
  )

  def __init__(self, StrategyId=None, StrategyName=None, StrategyContent=None,):
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName
    self.StrategyContent = StrategyContent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyContent = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateStrategyRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 2)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.StrategyContent is not None:
      oprot.writeFieldBegin('StrategyContent', TType.STRING, 3)
      oprot.writeString(self.StrategyContent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateStrategyResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateStrategyResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListStratgyResponseItem:
  """
  Attributes:
   - StrategyId
   - StrategyName
   - Status
   - Investment
   - TotalPNL
   - Sharp
   - TodayPNL
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.STRING, 'StrategyName', None, None, ), # 2
    (3, TType.I32, 'Status', None, None, ), # 3
    (4, TType.I32, 'Investment', None, None, ), # 4
    (5, TType.DOUBLE, 'TotalPNL', None, None, ), # 5
    (6, TType.DOUBLE, 'Sharp', None, None, ), # 6
    (7, TType.DOUBLE, 'TodayPNL', None, None, ), # 7
  )

  def __init__(self, StrategyId=None, StrategyName=None, Status=None, Investment=None, TotalPNL=None, Sharp=None, TodayPNL=None,):
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName
    self.Status = Status
    self.Investment = Investment
    self.TotalPNL = TotalPNL
    self.Sharp = Sharp
    self.TodayPNL = TodayPNL

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.Investment = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.TotalPNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.Sharp = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.TodayPNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListStratgyResponseItem')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 2)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 3)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.Investment is not None:
      oprot.writeFieldBegin('Investment', TType.I32, 4)
      oprot.writeI32(self.Investment)
      oprot.writeFieldEnd()
    if self.TotalPNL is not None:
      oprot.writeFieldBegin('TotalPNL', TType.DOUBLE, 5)
      oprot.writeDouble(self.TotalPNL)
      oprot.writeFieldEnd()
    if self.Sharp is not None:
      oprot.writeFieldBegin('Sharp', TType.DOUBLE, 6)
      oprot.writeDouble(self.Sharp)
      oprot.writeFieldEnd()
    if self.TodayPNL is not None:
      oprot.writeFieldBegin('TodayPNL', TType.DOUBLE, 7)
      oprot.writeDouble(self.TodayPNL)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ListStratgyResponse:
  """
  Attributes:
   - Status
   - Strategies
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.LIST, 'Strategies', (TType.STRUCT,(ListStratgyResponseItem, ListStratgyResponseItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, Status=None, Strategies=None,):
    self.Status = Status
    self.Strategies = Strategies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.Strategies = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ListStratgyResponseItem()
            _elem5.read(iprot)
            self.Strategies.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ListStratgyResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.Strategies is not None:
      oprot.writeFieldBegin('Strategies', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.Strategies))
      for iter6 in self.Strategies:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeTradingRequest:
  """
  Attributes:
   - StrategyId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
  )

  def __init__(self, StrategyId=None,):
    self.StrategyId = StrategyId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeTradingRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeTradingResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeTradingResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnSubscribeTradingRequest:
  """
  Attributes:
   - StrategyId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
  )

  def __init__(self, StrategyId=None,):
    self.StrategyId = StrategyId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnSubscribeTradingRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnSubscribeTradingResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnSubscribeTradingResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Instruction:
  """
  Attributes:
   - Time
   - InstrumentName
   - Cancel
   - Price
   - Quantity
   - RejectMessage
   - OrderId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Time', None, None, ), # 1
    (2, TType.STRING, 'InstrumentName', None, None, ), # 2
    (3, TType.BOOL, 'Cancel', None, None, ), # 3
    (4, TType.DOUBLE, 'Price', None, None, ), # 4
    (5, TType.I32, 'Quantity', None, None, ), # 5
    (6, TType.STRING, 'RejectMessage', None, None, ), # 6
    (7, TType.I32, 'OrderId', None, None, ), # 7
  )

  def __init__(self, Time=None, InstrumentName=None, Cancel=None, Price=None, Quantity=None, RejectMessage=None, OrderId=None,):
    self.Time = Time
    self.InstrumentName = InstrumentName
    self.Cancel = Cancel
    self.Price = Price
    self.Quantity = Quantity
    self.RejectMessage = RejectMessage
    self.OrderId = OrderId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.InstrumentName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.Cancel = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.Price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.Quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.RejectMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.OrderId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Instruction')
    if self.Time is not None:
      oprot.writeFieldBegin('Time', TType.STRING, 1)
      oprot.writeString(self.Time)
      oprot.writeFieldEnd()
    if self.InstrumentName is not None:
      oprot.writeFieldBegin('InstrumentName', TType.STRING, 2)
      oprot.writeString(self.InstrumentName)
      oprot.writeFieldEnd()
    if self.Cancel is not None:
      oprot.writeFieldBegin('Cancel', TType.BOOL, 3)
      oprot.writeBool(self.Cancel)
      oprot.writeFieldEnd()
    if self.Price is not None:
      oprot.writeFieldBegin('Price', TType.DOUBLE, 4)
      oprot.writeDouble(self.Price)
      oprot.writeFieldEnd()
    if self.Quantity is not None:
      oprot.writeFieldBegin('Quantity', TType.I32, 5)
      oprot.writeI32(self.Quantity)
      oprot.writeFieldEnd()
    if self.RejectMessage is not None:
      oprot.writeFieldBegin('RejectMessage', TType.STRING, 6)
      oprot.writeString(self.RejectMessage)
      oprot.writeFieldEnd()
    if self.OrderId is not None:
      oprot.writeFieldBegin('OrderId', TType.I32, 7)
      oprot.writeI32(self.OrderId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Position:
  """
  Attributes:
   - InstrumentName
   - PortfolioName
   - IsLongPosition
   - YesterdayPosition
   - TodayPosition
   - BuyQuantity
   - SellQuantity
   - BuyAveragePrice
   - SellAveragePrice
   - PNL
   - NetPNL
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'InstrumentName', None, None, ), # 1
    (2, TType.STRING, 'PortfolioName', None, None, ), # 2
    (3, TType.BOOL, 'IsLongPosition', None, None, ), # 3
    (4, TType.I32, 'YesterdayPosition', None, None, ), # 4
    (5, TType.I32, 'TodayPosition', None, None, ), # 5
    (6, TType.I32, 'BuyQuantity', None, None, ), # 6
    (7, TType.I32, 'SellQuantity', None, None, ), # 7
    (8, TType.DOUBLE, 'BuyAveragePrice', None, None, ), # 8
    (9, TType.DOUBLE, 'SellAveragePrice', None, None, ), # 9
    (10, TType.DOUBLE, 'PNL', None, None, ), # 10
    (11, TType.DOUBLE, 'NetPNL', None, None, ), # 11
  )

  def __init__(self, InstrumentName=None, PortfolioName=None, IsLongPosition=None, YesterdayPosition=None, TodayPosition=None, BuyQuantity=None, SellQuantity=None, BuyAveragePrice=None, SellAveragePrice=None, PNL=None, NetPNL=None,):
    self.InstrumentName = InstrumentName
    self.PortfolioName = PortfolioName
    self.IsLongPosition = IsLongPosition
    self.YesterdayPosition = YesterdayPosition
    self.TodayPosition = TodayPosition
    self.BuyQuantity = BuyQuantity
    self.SellQuantity = SellQuantity
    self.BuyAveragePrice = BuyAveragePrice
    self.SellAveragePrice = SellAveragePrice
    self.PNL = PNL
    self.NetPNL = NetPNL

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.InstrumentName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.PortfolioName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.IsLongPosition = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.YesterdayPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.TodayPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.BuyQuantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.SellQuantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.BuyAveragePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.SellAveragePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.PNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.NetPNL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Position')
    if self.InstrumentName is not None:
      oprot.writeFieldBegin('InstrumentName', TType.STRING, 1)
      oprot.writeString(self.InstrumentName)
      oprot.writeFieldEnd()
    if self.PortfolioName is not None:
      oprot.writeFieldBegin('PortfolioName', TType.STRING, 2)
      oprot.writeString(self.PortfolioName)
      oprot.writeFieldEnd()
    if self.IsLongPosition is not None:
      oprot.writeFieldBegin('IsLongPosition', TType.BOOL, 3)
      oprot.writeBool(self.IsLongPosition)
      oprot.writeFieldEnd()
    if self.YesterdayPosition is not None:
      oprot.writeFieldBegin('YesterdayPosition', TType.I32, 4)
      oprot.writeI32(self.YesterdayPosition)
      oprot.writeFieldEnd()
    if self.TodayPosition is not None:
      oprot.writeFieldBegin('TodayPosition', TType.I32, 5)
      oprot.writeI32(self.TodayPosition)
      oprot.writeFieldEnd()
    if self.BuyQuantity is not None:
      oprot.writeFieldBegin('BuyQuantity', TType.I32, 6)
      oprot.writeI32(self.BuyQuantity)
      oprot.writeFieldEnd()
    if self.SellQuantity is not None:
      oprot.writeFieldBegin('SellQuantity', TType.I32, 7)
      oprot.writeI32(self.SellQuantity)
      oprot.writeFieldEnd()
    if self.BuyAveragePrice is not None:
      oprot.writeFieldBegin('BuyAveragePrice', TType.DOUBLE, 8)
      oprot.writeDouble(self.BuyAveragePrice)
      oprot.writeFieldEnd()
    if self.SellAveragePrice is not None:
      oprot.writeFieldBegin('SellAveragePrice', TType.DOUBLE, 9)
      oprot.writeDouble(self.SellAveragePrice)
      oprot.writeFieldEnd()
    if self.PNL is not None:
      oprot.writeFieldBegin('PNL', TType.DOUBLE, 10)
      oprot.writeDouble(self.PNL)
      oprot.writeFieldEnd()
    if self.NetPNL is not None:
      oprot.writeFieldBegin('NetPNL', TType.DOUBLE, 11)
      oprot.writeDouble(self.NetPNL)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Order:
  """
  Attributes:
   - OrderId
   - InstrumentName
   - PortfolioName
   - IsSpeculation
   - OrderWay
   - BookPrice
   - BookQuantity
   - FilledQuantity
   - LeaveQuantity
   - AveragePrice
   - Message
   - Charge
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'OrderId', None, None, ), # 1
    (2, TType.STRING, 'InstrumentName', None, None, ), # 2
    (3, TType.STRING, 'PortfolioName', None, None, ), # 3
    (4, TType.BOOL, 'IsSpeculation', None, None, ), # 4
    (5, TType.STRING, 'OrderWay', None, None, ), # 5
    (6, TType.DOUBLE, 'BookPrice', None, None, ), # 6
    (7, TType.I32, 'BookQuantity', None, None, ), # 7
    (8, TType.I32, 'FilledQuantity', None, None, ), # 8
    (9, TType.I32, 'LeaveQuantity', None, None, ), # 9
    (10, TType.DOUBLE, 'AveragePrice', None, None, ), # 10
    (11, TType.STRING, 'Message', None, None, ), # 11
    (12, TType.DOUBLE, 'Charge', None, None, ), # 12
  )

  def __init__(self, OrderId=None, InstrumentName=None, PortfolioName=None, IsSpeculation=None, OrderWay=None, BookPrice=None, BookQuantity=None, FilledQuantity=None, LeaveQuantity=None, AveragePrice=None, Message=None, Charge=None,):
    self.OrderId = OrderId
    self.InstrumentName = InstrumentName
    self.PortfolioName = PortfolioName
    self.IsSpeculation = IsSpeculation
    self.OrderWay = OrderWay
    self.BookPrice = BookPrice
    self.BookQuantity = BookQuantity
    self.FilledQuantity = FilledQuantity
    self.LeaveQuantity = LeaveQuantity
    self.AveragePrice = AveragePrice
    self.Message = Message
    self.Charge = Charge

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.OrderId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.InstrumentName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.PortfolioName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.IsSpeculation = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.OrderWay = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.BookPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.BookQuantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.FilledQuantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.LeaveQuantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.AveragePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.Message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.Charge = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Order')
    if self.OrderId is not None:
      oprot.writeFieldBegin('OrderId', TType.I32, 1)
      oprot.writeI32(self.OrderId)
      oprot.writeFieldEnd()
    if self.InstrumentName is not None:
      oprot.writeFieldBegin('InstrumentName', TType.STRING, 2)
      oprot.writeString(self.InstrumentName)
      oprot.writeFieldEnd()
    if self.PortfolioName is not None:
      oprot.writeFieldBegin('PortfolioName', TType.STRING, 3)
      oprot.writeString(self.PortfolioName)
      oprot.writeFieldEnd()
    if self.IsSpeculation is not None:
      oprot.writeFieldBegin('IsSpeculation', TType.BOOL, 4)
      oprot.writeBool(self.IsSpeculation)
      oprot.writeFieldEnd()
    if self.OrderWay is not None:
      oprot.writeFieldBegin('OrderWay', TType.STRING, 5)
      oprot.writeString(self.OrderWay)
      oprot.writeFieldEnd()
    if self.BookPrice is not None:
      oprot.writeFieldBegin('BookPrice', TType.DOUBLE, 6)
      oprot.writeDouble(self.BookPrice)
      oprot.writeFieldEnd()
    if self.BookQuantity is not None:
      oprot.writeFieldBegin('BookQuantity', TType.I32, 7)
      oprot.writeI32(self.BookQuantity)
      oprot.writeFieldEnd()
    if self.FilledQuantity is not None:
      oprot.writeFieldBegin('FilledQuantity', TType.I32, 8)
      oprot.writeI32(self.FilledQuantity)
      oprot.writeFieldEnd()
    if self.LeaveQuantity is not None:
      oprot.writeFieldBegin('LeaveQuantity', TType.I32, 9)
      oprot.writeI32(self.LeaveQuantity)
      oprot.writeFieldEnd()
    if self.AveragePrice is not None:
      oprot.writeFieldBegin('AveragePrice', TType.DOUBLE, 10)
      oprot.writeDouble(self.AveragePrice)
      oprot.writeFieldEnd()
    if self.Message is not None:
      oprot.writeFieldBegin('Message', TType.STRING, 11)
      oprot.writeString(self.Message)
      oprot.writeFieldEnd()
    if self.Charge is not None:
      oprot.writeFieldBegin('Charge', TType.DOUBLE, 12)
      oprot.writeDouble(self.Charge)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Deal:
  """
  Attributes:
   - OrderId
   - Time
   - InstrumentName
   - PortfolioName
   - Price
   - Quantity
   - Charge
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'OrderId', None, None, ), # 1
    (2, TType.STRING, 'Time', None, None, ), # 2
    (3, TType.STRING, 'InstrumentName', None, None, ), # 3
    (4, TType.STRING, 'PortfolioName', None, None, ), # 4
    (5, TType.DOUBLE, 'Price', None, None, ), # 5
    (6, TType.I32, 'Quantity', None, None, ), # 6
    (7, TType.DOUBLE, 'Charge', None, None, ), # 7
  )

  def __init__(self, OrderId=None, Time=None, InstrumentName=None, PortfolioName=None, Price=None, Quantity=None, Charge=None,):
    self.OrderId = OrderId
    self.Time = Time
    self.InstrumentName = InstrumentName
    self.PortfolioName = PortfolioName
    self.Price = Price
    self.Quantity = Quantity
    self.Charge = Charge

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.OrderId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.InstrumentName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.PortfolioName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.Price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.Quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.Charge = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Deal')
    if self.OrderId is not None:
      oprot.writeFieldBegin('OrderId', TType.I32, 1)
      oprot.writeI32(self.OrderId)
      oprot.writeFieldEnd()
    if self.Time is not None:
      oprot.writeFieldBegin('Time', TType.STRING, 2)
      oprot.writeString(self.Time)
      oprot.writeFieldEnd()
    if self.InstrumentName is not None:
      oprot.writeFieldBegin('InstrumentName', TType.STRING, 3)
      oprot.writeString(self.InstrumentName)
      oprot.writeFieldEnd()
    if self.PortfolioName is not None:
      oprot.writeFieldBegin('PortfolioName', TType.STRING, 4)
      oprot.writeString(self.PortfolioName)
      oprot.writeFieldEnd()
    if self.Price is not None:
      oprot.writeFieldBegin('Price', TType.DOUBLE, 5)
      oprot.writeDouble(self.Price)
      oprot.writeFieldEnd()
    if self.Quantity is not None:
      oprot.writeFieldBegin('Quantity', TType.I32, 6)
      oprot.writeI32(self.Quantity)
      oprot.writeFieldEnd()
    if self.Charge is not None:
      oprot.writeFieldBegin('Charge', TType.DOUBLE, 7)
      oprot.writeDouble(self.Charge)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomSeries:
  """
  Attributes:
   - Time
   - ComponentName
   - Value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Time', None, None, ), # 1
    (2, TType.STRING, 'ComponentName', None, None, ), # 2
    (3, TType.DOUBLE, 'Value', None, None, ), # 3
  )

  def __init__(self, Time=None, ComponentName=None, Value=None,):
    self.Time = Time
    self.ComponentName = ComponentName
    self.Value = Value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ComponentName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.Value = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomSeries')
    if self.Time is not None:
      oprot.writeFieldBegin('Time', TType.STRING, 1)
      oprot.writeString(self.Time)
      oprot.writeFieldEnd()
    if self.ComponentName is not None:
      oprot.writeFieldBegin('ComponentName', TType.STRING, 2)
      oprot.writeString(self.ComponentName)
      oprot.writeFieldEnd()
    if self.Value is not None:
      oprot.writeFieldBegin('Value', TType.DOUBLE, 3)
      oprot.writeDouble(self.Value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradingNotify:
  """
  Attributes:
   - Instructions
   - Positions
   - Orders
   - Deals
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'Instructions', (TType.STRUCT,(Instruction, Instruction.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'Positions', (TType.STRUCT,(Position, Position.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'Orders', (TType.STRUCT,(Order, Order.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'Deals', (TType.STRUCT,(Deal, Deal.thrift_spec)), None, ), # 4
  )

  def __init__(self, Instructions=None, Positions=None, Orders=None, Deals=None,):
    self.Instructions = Instructions
    self.Positions = Positions
    self.Orders = Orders
    self.Deals = Deals

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.Instructions = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Instruction()
            _elem12.read(iprot)
            self.Instructions.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.Positions = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = Position()
            _elem18.read(iprot)
            self.Positions.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.Orders = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = Order()
            _elem24.read(iprot)
            self.Orders.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.Deals = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = Deal()
            _elem30.read(iprot)
            self.Deals.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradingNotify')
    if self.Instructions is not None:
      oprot.writeFieldBegin('Instructions', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.Instructions))
      for iter31 in self.Instructions:
        iter31.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.Positions is not None:
      oprot.writeFieldBegin('Positions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.Positions))
      for iter32 in self.Positions:
        iter32.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.Orders is not None:
      oprot.writeFieldBegin('Orders', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.Orders))
      for iter33 in self.Orders:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.Deals is not None:
      oprot.writeFieldBegin('Deals', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.Deals))
      for iter34 in self.Deals:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeployBackTestRequest:
  """
  Attributes:
   - StrategyId
   - BeginTime
   - EndTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.STRING, 'BeginTime', None, None, ), # 2
    (3, TType.STRING, 'EndTime', None, None, ), # 3
  )

  def __init__(self, StrategyId=None, BeginTime=None, EndTime=None,):
    self.StrategyId = StrategyId
    self.BeginTime = BeginTime
    self.EndTime = EndTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.BeginTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.EndTime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeployBackTestRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.BeginTime is not None:
      oprot.writeFieldBegin('BeginTime', TType.STRING, 2)
      oprot.writeString(self.BeginTime)
      oprot.writeFieldEnd()
    if self.EndTime is not None:
      oprot.writeFieldBegin('EndTime', TType.STRING, 3)
      oprot.writeString(self.EndTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeployBackTestResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeployBackTestResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeployStrategyRequest:
  """
  Attributes:
   - StrategyId
   - DeployType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.I32, 'DeployType', None, None, ), # 2
  )

  def __init__(self, StrategyId=None, DeployType=None,):
    self.StrategyId = StrategyId
    self.DeployType = DeployType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.DeployType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeployStrategyRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.DeployType is not None:
      oprot.writeFieldBegin('DeployType', TType.I32, 2)
      oprot.writeI32(self.DeployType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeployStrategyResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
   - DelployType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
    (4, TType.I32, 'DelployType', None, None, ), # 4
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None, DelployType=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName
    self.DelployType = DelployType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.DelployType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeployStrategyResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.DelployType is not None:
      oprot.writeFieldBegin('DelployType', TType.I32, 4)
      oprot.writeI32(self.DelployType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DisableStrategyRequest:
  """
  Attributes:
   - StrategyId
   - DeployType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.I32, 'DeployType', None, None, ), # 2
  )

  def __init__(self, StrategyId=None, DeployType=None,):
    self.StrategyId = StrategyId
    self.DeployType = DeployType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.DeployType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DisableStrategyRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.DeployType is not None:
      oprot.writeFieldBegin('DeployType', TType.I32, 2)
      oprot.writeI32(self.DeployType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DisableStrategyResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
   - DeployType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
    (4, TType.I32, 'DeployType', None, None, ), # 4
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None, DeployType=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName
    self.DeployType = DeployType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.DeployType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DisableStrategyResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.DeployType is not None:
      oprot.writeFieldBegin('DeployType', TType.I32, 4)
      oprot.writeI32(self.DeployType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnableStrategyRequest:
  """
  Attributes:
   - StrategyId
   - DeployType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'StrategyId', None, None, ), # 1
    (2, TType.I32, 'DeployType', None, None, ), # 2
  )

  def __init__(self, StrategyId=None, DeployType=None,):
    self.StrategyId = StrategyId
    self.DeployType = DeployType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.DeployType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnableStrategyRequest')
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 1)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.DeployType is not None:
      oprot.writeFieldBegin('DeployType', TType.I32, 2)
      oprot.writeI32(self.DeployType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnableStrategyResponse:
  """
  Attributes:
   - Status
   - StrategyId
   - StrategyName
   - DeployType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Status', None, None, ), # 1
    (2, TType.I32, 'StrategyId', None, None, ), # 2
    (3, TType.STRING, 'StrategyName', None, None, ), # 3
    (4, TType.I32, 'DeployType', None, None, ), # 4
  )

  def __init__(self, Status=None, StrategyId=None, StrategyName=None, DeployType=None,):
    self.Status = Status
    self.StrategyId = StrategyId
    self.StrategyName = StrategyName
    self.DeployType = DeployType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.StrategyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.StrategyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.DeployType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnableStrategyResponse')
    if self.Status is not None:
      oprot.writeFieldBegin('Status', TType.I32, 1)
      oprot.writeI32(self.Status)
      oprot.writeFieldEnd()
    if self.StrategyId is not None:
      oprot.writeFieldBegin('StrategyId', TType.I32, 2)
      oprot.writeI32(self.StrategyId)
      oprot.writeFieldEnd()
    if self.StrategyName is not None:
      oprot.writeFieldBegin('StrategyName', TType.STRING, 3)
      oprot.writeString(self.StrategyName)
      oprot.writeFieldEnd()
    if self.DeployType is not None:
      oprot.writeFieldBegin('DeployType', TType.I32, 4)
      oprot.writeI32(self.DeployType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
